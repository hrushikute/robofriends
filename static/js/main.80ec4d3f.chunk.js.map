{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundry.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","cardArray","map","user","i","SearchBox","seachFeild","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","Component","App","onSearchChange","event","setState","searchFeild","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0OAaeA,EAZF,SAACC,GACV,OACI,sBAAKC,UAAU,kDAAf,UACI,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,GAAhC,cACpB,gCACI,6BAAKJ,EAAMK,OACX,4BAAIL,EAAMM,eCaXC,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAEhC,OACA,cAAC,EAAD,CAEIR,GAAII,EAAOI,GAAGR,GACdC,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,OAHZM,MAMb,OACI,8BACKH,KCHEI,EAXE,SAAC,GAA+B,EAA9BC,WAA+B,IAAnBC,EAAkB,EAAlBA,aAC3B,OACI,qBAAKd,UAAU,MAAf,SACI,uBAAOA,UAAW,oCAClBe,KAAK,SACLC,YAAY,qBACZC,SAAUH,OCGPI,EATD,SAACnB,GACX,OACI,qBAAKoB,MAAO,CAACC,SAAS,SAAUC,OAAQ,kBAAmBC,OAAO,SAAlE,SACKvB,EAAMwB,YCqBJC,E,kDAtBX,WAAYzB,GAAQ,IAAD,8BACf,cAAMA,IACD0B,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKJ,MAAMC,SAAS,CAAEA,UAAU,M,oBAGpC,WACI,OAAIG,KAAKJ,MAAMC,SAEP,uDAIJG,KAAK9B,MAAMwB,a,GApBIO,aCwDZC,E,kDAhDX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAbzC,EAAKZ,MAAQ,CACTlB,OAAQ,GACR4B,YAAc,IAJR,E,qDAQd,WAAoB,IAAD,OACfG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAS,EAAKR,SAAS,CAAC3B,OAAQmC,S,oBAQ9C,WAAS,IAAD,OAEEC,EAAiBd,KAAKJ,MAAMlB,OAAOqC,QAAO,SAAArC,GAC5C,OAAOA,EAAOH,KAAKyC,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBAErE,OAAiC,IAA7BhB,KAAKJ,MAAMlB,OAAOwC,OACX,oBAAI/C,UAAU,KAAd,wBAIH,sBAAKA,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,sBACA,cAAC,EAAD,CAAWc,aAAgBe,KAAKG,iBAChC,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,OAAQoC,e,GAnC5Bb,aCGHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OAAQ,cAAC,EAAD,IACZC,SAASC,eAAe,SAI7BX,M","file":"static/js/main.80ec4d3f.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card = (props) => {\r\n    return(\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw shadow-5'>\r\n            <img alt='photo' src={`https://robohash.org/${props.id}?200x200`}/>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardArray = robots.map((user, i) => {\r\n    \r\n        return (\r\n        <Card \r\n            key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email}/>\r\n        );\r\n    })\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({seachFeild, searchChange}) => {\r\n    return(\r\n        <div className='pa3'>\r\n            <input className ='pa3 ba  b--green b--lightest-blue'\r\n            type='search'\r\n            placeholder='Search robots bhai'\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props) => {\r\n    return(\r\n        <div style={{overflow:'scroll', border: '5px solid black', height:'800px'}} >\r\n            {props.children}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.state.hasError({ hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError){\r\n            return (\r\n                <h1>Ooops that not goood.</h1>\r\n            );\r\n        }\r\n        return(\r\n            this.props.children\r\n        );\r\n    }\r\n}\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport { robots } from './robots';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundry from './ErrorBoundry';\r\n\r\n\r\nclass App extends Component { \r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchFeild : '',\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response=>response.json())\r\n            .then(users =>{this.setState({robots: users})})\r\n    }\r\n    // Create a function on search change which accepts the event from search box\r\n    onSearchChange = (event) => {\r\n        this.setState({searchFeild: event.target.value})\r\n    \r\n    }\r\n\r\n    render(){\r\n        \r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchFeild.toLowerCase())\r\n        })\r\n        if (this.state.robots.length === 0) {\r\n            return <h1 className='tc'>LOADING...</h1>\r\n        }\r\n        else{\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboBhai</h1>\r\n                    <SearchBox searchChange = {this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                    \r\n                </div>\r\n                \r\n                );\r\n            }\r\n\r\n        }\r\n\r\n\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n// import {robots} from './robots';\n// import CardList from './CardList';\nReactDOM.render( <App />\n    ,document.getElementById('root'));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}